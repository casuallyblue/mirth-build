module(ini-parser.parser)

import(std.prelude)
import(std.maybe)
import(std.str)
import(std.byte)
import(std.path)

import(posix.input)
import(posix.posix)
import(posix.file)

data(Error(a),
  UnexpectedValue,
  MissingCloseBrace,
  UnexpectedDataAfterValue,
  MissingValue,
  CallbackError -> a
)

data(State(a),
  State -> prev-name:Maybe(Str) current-section:Maybe(Str))

data(+State, State -> state:State(a) error:Maybe(Error(b)) line:Str)
def(+State.default, -- +State,
        NONE >prev-name 
        NONE >current-section 
      State.State >state 
      NONE >error 
      "" >line
    +State.State)

def(strip, Str -- Str,
  drop-until(is-whitespace not))

def(skip-whitespace-and-comment, Str -- Str,
    strip

    dup empty? not then(
        dup first-byte and-some(BHASH ==) then(
	    drop ""
	)
    )
)

def(read-line, +Input -- +Input Maybe(Str),
    done? if(
        NONE,
        build-str!(
            while(rdip(done? not and(peek BLF <> if(T, F move!))),
   	        rdip(peek) push-byte-ascii! rdip(move!)))
        SOME))

def(name-from-line, +State -- +State name:Maybe(Str),
    line thaw "=" find freeze drop match(
        SOME -> >Size 1- 0 >Offset swap line unsafe(slice)
	dup num-bytes line:unsafe(drop-bytes)
	SOME >name,

	NONE -> NONE >name MissingValue SOME error!
    )
)

def(value-from-line, +State -- +State value:Maybe(Str),
    line SOME >value
    "" line!
)

def(is-section?, Str -- Bool,
    first-byte and-some(BLSQUARE ==))

def(ini-parse-kv(f), (data:a section:Maybe(Str) name:Maybe(Str) value:Maybe(Str) -- data:a error:Maybe(b))
    data:a +State -- +State data:a, 

    name-from-line

    line:skip-whitespace-and-comment
    
    line first-byte and-some(B'=' ==) if(
        1 >Size line:unsafe(drop-bytes)
      	line:skip-whitespace-and-comment
        value-from-line 		        

	state current-section >section f
	error> match(
	    SOME -> CallbackError SOME,
	    NONE -> NONE 
	) error!

	line:skip-whitespace-and-comment
	line empty? not if(
            UnexpectedDataAfterValue SOME error!,
	    id
	),

	name> drop MissingValue SOME error!
    )
)

def(ini-parse-section(f), (data:a section:Maybe(Str) name:Maybe(Str) value:Maybe(Str) -- data:a error:Maybe(b))
    data:a +State -- +State data:a, 

    line first-byte and-some(BLSQUARE ==) if(
        line thaw "]" find freeze drop match(
	    SOME ->
	        >Size 1- 1 >Offset swap line unsafe(slice)
		dup num-bytes line:unsafe(drop-bytes)

		SOME dup state:current-section! >section 
		NONE >name 
		NONE >value
		f error> match(
	            SOME -> CallbackError SOME,
	            NONE -> NONE 
	        ) error!,
	    NONE -> MissingCloseBrace SOME error!
	),
	id
    )
)

def(ini-parse-line(f), (data:a section:Maybe(Str) name:Maybe(Str) value:Maybe(Str) -- data:a error:Maybe(b))
    data:a +State -- +State data:a,
    
    line:skip-whitespace-and-comment

    line empty? not if(
        line is-section? if(
	    ini-parse-section(f),
	    ini-parse-kv(f)
	),
	id
    )
)

def(ini-parse-input(f), (data:a section:Maybe(Str) name:Maybe(Str) value:Maybe(Str) -- data:a error:Maybe(b)) 
    +Input a -- +Input a Maybe(Error(b)),
    +State.default

    >data

    NONE >line
    while(line> drop rdip(read-line) dup >line some?,
        line> unwrap line! ini-parse-line(f)

	NONE >line
    )
    line> drop

    /State state> drop 
    line> drop
    data>
    error>
)

def(ini-parse(f), (data:a section:Maybe(Str) name:Maybe(Str) value:Maybe(Str) -- data:a error:Maybe(b)) 
  Path a +World -- +World a Maybe(Error(b)),

  dip(open-file!) +Input.start! ini-parse-input(f) end! close-file!
)
