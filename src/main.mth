module(mirth-build.main)

import(std.prelude)
import(std.str)
import(std.byte)
import(std.path)
import(std.maybe)
import(std.list)
import(std.either)

import(posix.posix)

import(ini-parser.parser)

import(mirth-build.options)
import(mirth-build.package-data)

data(Error,
    UnknownKey -> Str,
    MissingKey,
    MissingValue)

def(meta-parsefn, 
    data:PackageDataBuilder 
    name:Maybe(Str)
    value:Maybe(Str)
    --
    data:PackageDataBuilder
    error:Maybe(mirth-build.main.Error),

    name> match(
        SOME -> dup "name" == if(
	    drop value> data> name! >data NONE, 
	    dup "c-source" == if(
	        drop value> map(>Path) data> c-source! >data NONE,
		UnknownKey SOME value> drop
	    )
	),
	NONE -> value> drop NONE
    ) >error
)

def-external(dir_exists, Ptr -- Bool)

def(dir-exists?, Path -- Bool,
    >Str with-data-cstr(dir_exists))

def-external(file_exists, Ptr -- Bool)

def(file-exists?, Path -- Bool,
    >Str with-data-cstr(file_exists))

def(pull-git-source, dir:Str url:Str -- Path,
    "build" >Path
    dir> >Path join dup dir-exists? not if(
        dup >Str url> Str("git clone " ; ; " " ; ;) run-program drop,	
	url> drop
    ))

def(do-dependency, name:Str value:Str data:PackageDataBuilder -- data:PackageDataBuilder error:Maybe(mirth-build.main.Error),
    name> dup >dir value> >url pull-git-source

    data> dependencies(
        dip(
	    "src" >Path join >path >name
	    NONE >c-source
	    L0 >dependencies
	    L0 >bin 
	    PackageData.PackageData
	) cons
    ) >data

    NONE >error
)

def(dependencies-parsefn, 
    data:PackageDataBuilder 
    name:Maybe(Str)
    value:Maybe(Str)
    --
    data:PackageDataBuilder
    error:Maybe(mirth-build.main.Error),
    
    name> match(
        SOME -> >name 
	value> match(
	    SOME -> >value do-dependency,
	    NONE -> name> drop mirth-build.main.Error.MissingValue SOME >error
	),
	NONE -> value> drop NONE >error
    ))

def(bin-parsefn, 
    data:PackageDataBuilder 
    name:Maybe(Str)
    value:Maybe(Str)
    --
    data:PackageDataBuilder
    error:Maybe(mirth-build.main.Error),

    name> match(
        SOME -> value> match(
	    SOME -> pack2 data> bin:cons >data NONE >error,
	    NONE -> drop mirth-build.main.Error.MissingValue SOME >error),
	NONE -> value> drop NONE >error))



def(package-parsefn, 
    data:PackageDataBuilder 
    section:Maybe(Str) 
    name:Maybe(Str) 
    value:Maybe(Str) 
    -- 
    data:PackageDataBuilder 
    error:Maybe(mirth-build.main.Error),

    section> match (
        SOME -> 
	  dup "package" == if(
	      meta-parsefn, 
	      dup "dependencies" == if(
	          dependencies-parsefn,
		  dup "bin" == if(
		      bin-parsefn,
		      name> drop value> drop
		      NONE >error))) drop,
	NONE -> name> drop value> drop NONE >error))

def(make-cli-package-arg, PackageData -- Str, \(package ->
    Str(" -p " ; package name ; ":" ; package path >Str ;)))

def(make-bin-mirth-arg, [Str Str] -- Str, 
    unpack2 >source >bin
    Str("-o bin/" ; bin> ; ".c" ; " " ; source> ;))

def(make-bin-gcc-arg, [Str Str] -- Str,
    unpack2 drop dup 
    Str("-o bin/" ; ; " bin/" ; ; ".c" ;))

def-external(system, Ptr -- Int)
def(run-program, Str -- Int,
    with-data-cstr(system))

def(build-mirth-bin-csrc, packages:Str bin:[Str Str] --,
    Str("mirth" ; packages> ; " " ; bin> make-bin-mirth-arg ;) dup print-ln! run-program drop)

def(build-mirth-bin-gcc, c-source:Str bin:[Str Str] --,
    Str("gcc" ; " " ; c-source> ; " " ; bin> make-bin-gcc-arg ;) dup print-ln! run-program drop
)

def(main, +World -- +World,
    parse-args drop
    "mirth-build.ini" >Path PackageDataBuilder.new path(drop "src" >Path SOME) ini-parse(package-parsefn) drop  
    build match(
        LEFT -> show panic!,
	RIGHT -> \(package ->
	    package dependencies map(make-cli-package-arg) fold(cat) unwrap-or("") package make-cli-package-arg cat

	    package bin for(>bin dup >packages build-mirth-bin-csrc) drop

	    package c-source map(>Str) unwrap-or("")
	    package bin for(>bin dup >c-source build-mirth-bin-gcc) drop
	)
    )
)
